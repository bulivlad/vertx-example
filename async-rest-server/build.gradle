plugins {
  id 'java'
  id 'idea'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '5.0.0'
}

group = 'io.dotinc'
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
}

application {
  mainClassName = 'io.vertx.core.Launcher'
}

sourceCompatibility = '1.8'

def mainVerticleName = 'io.dotinc.async_rest_server.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
  implementation "io.vertx:vertx-core:$vertxVersion"
  implementation "io.vertx:vertx-web-client:$vertxVersion"
  implementation "io.vertx:vertx-web:$vertxVersion"
  compile "io.vertx:vertx-config:$vertxVersion"
  compile "ch.qos.logback:logback-classic:$logVersion"
  compile "org.apache.commons:commons-lang3:$apacheVersion"
  compileOnly "org.projectlombok:lombok:$lombokVersion"
  annotationProcessor "org.projectlombok:lombok:$lombokVersion"

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
}


shadowJar {
  classifier = 'fat'
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}

task buildDockerImage {
  doLast {
    try {
      exec {
        commandLine 'docker', 'build', '-t', 'vertx-async-rest:latest', '-f', './docker/Dockerfile', '.'
      }
    } catch(Exception ex) {
      println 'Failed to build the docker image'
      println ex
    }
  }
}

task startDockerContainer(dependsOn: buildDockerImage) {
  doLast {
    try {
      exec {
        commandLine 'docker-compose', '-f', "$projectDir/docker/docker-compose.yml", 'up', '-d', '--remove-orphans', 'async-rest-server'
      }
    } catch(Exception ex) {
      println 'Failed to start docker container '
      println ex
    }
  }
}

buildDockerImage.dependsOn(build)
